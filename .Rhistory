z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
class(h)
class(f)
rm(f)
rem(cube)
rm(cube)
class(z)
?cbind
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(1,2)
f
h(2)
rm()
rm(h)
library(datasets)
data(iris)
x <- mean(iris$Sepal.Length)
x <- mean(iris$Sepal.Length [iris$Species = "virginica"])
?mean
x <- iris$Species = "Virginica"
x <- iris$Species("Virginica")
x <- iris$Species == "Virginica"
Y <- mean(iris$Sepal.Length(x))
R.version.string
install.packages("swirl")
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim()
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5, byrow=TRUE)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind( patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !== 7
5 NOT 7
!(5 == 7)
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(INTS <0)
any(ints<0)
all(ints>0)
library(SDSFoundations)
animaldata <- AnimalData
table(animaldata$Age.Intake)
adults <- animaldata[animaldata$Age.Intake>=1,]
191+282
adultsdog <- adults$Animal.Type
table(adults$Animal.Type)
rm(adultsdog)
adultsdog <- adults[adults$Animal.Type=="Dog"]
adultsdog <- adults[adults$Animal.Type=="Dog",]
adultsdog <- adults[adults$Animal.Type=="Dog",]
adultscat <- adults[adults$Animal.Type=="Cat",]
hist(adultsdog$Weight)
hist(adultscat$Weight)
mean(adultscat$Weight)
sd(adultscat$Weight)
(13-8.6)/1.91
1-pnorm(2.3)
pnorm(2.3)
hist(adultsdog$Weight)
fivenum(adultsdog$Weight)
hist(adultscat$Weight)
hist(adultsdog$Weight)
fivenum(adultscat$Weight)
hist(adultscat$Weight)
mean(adultscat$Weight) + qnorm(0.99) * sd(adultscat$Weight)
mean(adultscat$Weight) - qnorm(0.99) * sd(adultscat$Weight)
mean(adultscat$Weight) - qnorm(0.99) * sd(adultscat$Weight)
table(animaldata$Intake.Type)
table(adultsdog$Intake.Type)
dogs <- animaldata[animaldata$Animal.Type=="Dog"]
dogs <- animaldata[animaldata$Animal.Type=="Dog",]
table(dogs$Intake.Type)
291-81
210/291
81/291
dogsOS <- dogs[dogs$Intake.Type=="Owner Surrender",]
table(dogsOS)
table(dogsOS$Outcome.Type)
dogOS_RO <- dogOS[dogOS$Outcome.Type=="Return to Owner",]
dogsOS_RO <- dogsOS[dogsOS$Outcome.Type=="Return to Owner",]
mean(dogsOS_RO$Days.Shelter)
View(dogsOS_RO)
hist(dogs$Intake.Type)
600/15
15/6
6/15
0.4*45
x <- as.numeric(c(2, 2, 3, 5, 6, 7 ,9, 13, 15, 18))
fivenum(x)
mean(x)
apply(x+2)
apply(x, x+2)
x + 2
y<- x+2
mean(y)
fivenum(y)
z <- x*2
z
fivenum(z)
zz <- x*3
fivenum(zz)
setwd("C:/R-Programming")
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "C:/R-Programming/GCD")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "C:/R-Programming/GCD/USA_Housing_2006.csv")
DataFrame <- data.frame(0)
DataFrame <- data.frame()
DataFrame <- read.csv("C:/R-Programming/GCD/USA_Housing_2006.csv")
table(DataFrame$VAL)
table(DataFrame$FES)
View(DataFrame)
View(DataFrame)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "C:/R-Programming/GCD/Gas.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "C:/R-Programming/GCD/Gas.xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(xlsx)
data_full <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?",
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
setwd("C:/R-Programming/Exploratory Data Analysis/Project1")
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
setwd("C:/R-Programming")
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
data_complete <- read.csv("./Exploratory Data Analysis/Project1/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
?rm
data <- subset(data_complete, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
head(data)
datetime
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot22.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot22.R')
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("xlsx")
library(rJava)
library(xlsx)
detach("package:xlsx", unload=TRUE)
detach("package:xlsxjars", unload=TRUE)
gasdata <- read.xlsx("./GCD/gas.xlsx", sheetIndex=1, header=TRUE)
library(rJava)
library(xlsxjars)
library(xlsx)
gasdata <- read.xlsx("./GCD/gas.xlsx", sheetIndex=1, header=TRUE)
View(gasdata)
dat <- gasdata[18:24, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
View(dat)
View(dat)
gasdata <- read.xlsx("./GCD/gas.xlsx", sheetIndex=1)
dat <- gasdata[18:24, 7:15]
View(gasdata)
View(gasdata)
View(dat)
View(dat)
dat <- gasdata[17:24, 8:16]
View(dat)
View(dat)
dat <- gasdata[16:24, 8:16]
View(dat)
View(dat)
dat <- gasdata[17:26, 7:15]
View(dat)
View(dat)
dat <- gasdata[17:24, 7:15]
View(dat)
View(dat)
80120*456
5*0
library(xlm)
install.packages("XML")
library(XML)
restData <- xmlTreeParse("./GCD/restaurants.xml", useInternal=TRUE)
restData
rootNode <- xmlRoot(restData)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[2]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[2]]
zipvector <- xpathSApply(rootNode,"//zipcode",xmlValue)
count(zipvector==21231)
table(zipvector)
zip <- zipvector[zipvector==21231]
dim(zip)
lenght(zip)
length(zip)
rootNode[[1]][[100]][[2]]
rootNode[[1]][[110]][[2]]
quiz15 <- read.csv("./GCD/quiz1-5.csv", sep=",")
trut(quiz15)
str(quiz15)
rm(quiz15)
DT <- read.csv("./GCD/quiz1-5.csv", sep=",")
DT <- data.table(read.csv("./GCD/quiz1-5.csv", sep=","))
library(data.table)
install.packages("data.table")
rm(DT)
DT <- data.table(read.csv("./GCD/quiz1-5.csv", sep=","))
library(data.table)
DT <- data.table(read.csv("./GCD/quiz1-5.csv", sep=","))
str(DT)
mean(DT$pwgtp15,by=DT$SEX)
table(DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean) )
proc.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean), gcFirst=TRUE)
t <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean), gcFirst=TRUE)
t
t[3]
t <- system.time(y <- mean(DT[DT$SEX == 1, ]$pwgtp15)) + system.time(mean(DT[DT$SEX ==
2, ]$pwgtp15))
t <- system.time(y <- mean(DT[DT$SEX == 1, ]$pwgtp15)) + system.time(mean(DT[DT$SEX == 2, ]$pwgtp15))
t
mean(DT$pwgtp15,by=DT$SEX) #Does not provide the mean of pwgtp15 by sex
tapply(DT$pwgtp15,DT$SEX,mean) # Provide requested answer
sapply(split(DT$pwgtp15,DT$SEX),mean) # Provide requested answer
DT[,mean(pwgtp15),by=SEX]  # Provide requested answer
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) # Provide 2 means without sex reference info
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
T1 <- system.time(tapply(DT$pwgtp15,DT$SEX,mean)) # Provide requested answer
T2 <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)) # Provide requested answer
T3 <- system.time(DT[,mean(pwgtp15),by=SEX])  # Provide requested answer
T4 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)) # Provide 2 means without sex reference info
T4 <- system.time(mean(DT[DT$SEX==1,]$pwgtp15) + mean(DT[DT$SEX==2,]$pwgtp15)) # Provide 2 means without sex reference info
timeVector = c(T1, T2, T3, T4)
str(timeVector)
timeVector
timeVector = cbind(T1, T2, T3, T4)
str(timeVector)
timeVector
timeVector = cbind(T1[3], T2[3], T3[3], T4[3])
str(timeVector)
timeVector
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot2.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot1.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
?legend
leg.txt <- c("Setosa     Petals", "Setosa     Sepals",
"Versicolor Petals", "Versicolor Sepals")
y.leg <- c(4.5, 3, 2.1, 1.4, .7)
cexv  <- c(1.2, 1, 4/5, 2/3, 1/2)
matplot(c(1, 8), c(0, 4.5), type = "n", xlab = "Length", ylab = "Width",
main = "Petal and Sepal Dimensions in Iris Blossoms")
for (i in seq(cexv)) {
text  (1, y.leg[i] - 0.1, paste("cex=", formatC(cexv[i])), cex = 0.8, adj = 0)
legend(3, y.leg[i], leg.txt, pch = "sSvV", col = c(1, 3), cex = cexv[i])
}
x <- seq(-pi, pi, len = 65)
plot(x, sin(x), type = "l", ylim = c(-1.2, 1.8), col = 3, lty = 2)
points(x, cos(x), pch = 3, col = 4)
lines(x, tan(x), type = "b", lty = 1, pch = 4, col = 6)
title("legend(..., lty = c(2, -1, 1), pch = c(NA, 3, 4), merge = TRUE)",
cex.main = 1.1)
legend(-1, 1.9, c("sin", "cos", "tan"), col = c(3, 4, 6),
text.col = "green4", lty = c(2, -1, 1), pch = c(NA, 3, 4),
merge = TRUE, bg = "gray90")
## right-justifying a set of labels: thanks to Uwe Ligges
x <- 1:5; y1 <- 1/x; y2 <- 2/x
plot(rep(x, 2), c(y1, y2), type = "n", xlab = "x", ylab = "y")
lines(x, y1); lines(x, y2, lty = 2)
temp <- legend("topright", legend = c(" ", " "),
text.width = strwidth("1,000,000"),
lty = 1:2, xjust = 1, yjust = 1,
title = "Line Types")
text(temp$rect$left + temp$rect$w, temp$text$y,
c("1,000", "1,000,000"), pos = 2)
source('~/.active-rstudio-document')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
?png
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot3.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('C:/R-Programming/Exploratory Data Analysis/Project1/plot4.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("C:/R-Programming/GitHubRep/RepData_PeerAssessment1")
```{r}
unzip("activity.zip")
activity <- read.csv("activity.csv")
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
View(steps.date)
View(steps.date)
View(activity)
View(activity)
steps.date <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.date$steps, names.arg=s teps.date$date, xlab="date", ylab="steps")
barplot(steps.date$steps, names.arg=s teps.date$date, xlab="date", ylab="steps")
barplot(steps.date$steps, names.arg=steps.date$date, xlab="date", ylab="steps")
steps.bydate <- aggregate(steps ~ date, data=activity, FUN=sum)
steps.interval <- aggregate(steps ~ interval, data=activity, FUN=mean)
View(steps.interval)
View(steps.interval)
mean(steps.bydate$steps)
median(steps.bydate$steps)
steps.byinterval <- aggregate(steps ~ interval, data=activity, FUN=mean)
plot(steps.byinterval, type="l")
steps.byinterval$interval[which.max(steps.byinterval$steps)]
sum(is.na(activity))
activity <- merge(activity, steps.byinterval, by="interval", suffixes=c("",".y"))
activity <- merge(activity, steps.byinterval, by="interval", suffixes=c("",".y"))
nas <- is.na(activity$steps)
activity$steps[nas] <- activity$steps.y[nas]
activity <- activity[,c(1:3)]
activity <- read.csv("activity.csv")
sum(is.na(activity))
steps.bydate <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.bydate$steps, names.arg=steps.bydate$date, xlab="Dates", ylab="# of steps")
steps.byinterval <- aggregate(steps ~ interval, data=activity, FUN=mean)
plot(steps.byinterval, type="l")
steps.byinterval$interval[which.max(steps.byinterval$steps)]
sum(is.na(activity))
View(activity)
View(steps.byinterval)
activitymerge <- merge(activity, steps.byinterval, by="interval", suffixes=c("",".y"))
View(activitymerge)
View(activitymerge)
activity_intervals <- merge(activity, steps.byinterval, by="interval", suffixes=c("",".y"))
nas <- is.na(activity_intervals$steps)
activity_intervals$steps[nas] <- activity_intervals$steps.y[nas]
activity <- activity_intervals[,c(1:3)]
steps.bydate <- aggregate(steps ~ date, data=activity, FUN=sum)
barplot(steps.bydate$steps, names.arg=steps.bydate$date, xlab="date", ylab="steps")
mean(steps.bydate$steps)
median(steps.bydate$steps)
daygroup <- function(date) {
if (weekdays(as.Date(date)) %in% c("Saturday", "Sunday")) {
"weekend"
} else {
"weekday"
}
}
activity$daygroup <- as.factor(sapply(activity$date, daygroup))
View(activity)
View(activity)
par(mfrow=c(2,1))
for (type in c("weekend", "weekday")) {
steps.bytype <- aggregate(steps ~ interval,
data=activity,
subset=activity$daygroup==type,
FUN=mean)
plot(steps.bytype, type="l", main=type)
}
?par
?mfrow
??mfrow
par()
par()
for (type in c("weekend", "weekday")) {
steps.bytype <- aggregate(steps ~ interval,
data=activity,
subset=activity$daygroup==type,
FUN=mean)
plot(steps.bytype, type="l", main=type)
}
par(mfrow=c(2,1))
for (type in c("weekend", "weekday")) {
steps.bytype <- aggregate(steps ~ interval,
data=activity,
subset=activity$daygroup==type,
FUN=mean)
plot(steps.bytype, type="l", main=type)
}
for (type in c("weekend", "weekday")) {
steps.bytype <- aggregate(steps ~ interval,
data=activity,
subset=activity$daygroup==type,
FUN=mean)
plot(steps.bytype, type="l", main=type)
}
library(knitr)
getwd()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
browseURL(“PA1_template.html”)
browseURL("PA1_template.html")
View(activity)
average_week <- ddply(activity, .(interval, daygroup), summarise, steps = mean(steps))
activity <- ddply(activity, .(interval, daygroup), summarise, steps = mean(steps))
library(lattice)
activity <- ddply(activity, .(interval, daygroup), summarise, steps = mean(steps))
library(plyr)
activity <- ddply(activity, .(interval, daygroup), summarise, steps = mean(steps))
xyplot(steps ~ interval | daygroup, data = activity, layout = c(1, 2), type = "l")
library(knitr)
knit2html("PA1_template.Rmd"")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
xyplot(steps ~ interval | daygroup, data = activity, layout = c(1, 2), type = "l", xlab="Interval", ylab="Number of steps")
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
